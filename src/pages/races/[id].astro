---
import Layout from '../../layouts/Layout.astro';
import racesData from '../../../public/data/races.json';
import circuits from '../../../public/data/circuits.json';
import drivers from '../../../public/data/drivers.json';
import teams from '../../../public/data/teams.json';
import results from '../../../public/data/results.json';

export async function getStaticPaths() {
  return racesData.map((race: any) => ({
    params: { id: race.id.toString() },
  }));
}

const { id } = Astro.params;
const races = racesData;

const race = races.find((r: any) => r.id === parseInt(id));
const circuit = circuits.find((c: any) => c.id === race.circuitId);
const raceResults = results.filter((r: any) => r.raceId === parseInt(id));

// Parse lap time string (mm:ss.milliseconds) to milliseconds
const parseTime = (timeStr: string): number => {
  const [minutes, secondsMs] = timeStr.split(':');
  const [seconds, milliseconds] = secondsMs.split('.');
  return parseInt(minutes) * 60000 + parseInt(seconds) * 1000 + parseInt(milliseconds);
};

// Find the fastest lap in this race
const fastestLapResult = raceResults
  .filter((r: any) => r.fastestLap && r.fastestLap !== '0:00.000' && !r.dnf)
  .reduce((fastest: any, r: any) => {
    if (!fastest) return r;
    return parseTime(r.fastestLap) < parseTime(fastest.fastestLap) ? r : fastest;
  }, null);

const resultsWithDrivers = raceResults.map((result: any) => {
  const driver = drivers.find((d: any) => d.id === result.driverId);
  const team = teams.find((t: any) => t.id === driver?.teamId);
  return { ...result, driver, team };
}).sort((a: any, b: any) => a.position - b.position);
---

<Layout title={`${race.name} - Apex Karting`}>
  <a href="/races" class="inline-block mb-4 md:mb-6 text-red-500 hover:text-red-400 transition-colors text-sm md:text-base">
    ‚Üê Back to Races
  </a>

  <div class="bg-zinc-900 rounded-lg p-4 md:p-8 mb-6 md:mb-8 border-l-4 border-red-600">
    <!-- Mobile Layout -->
    <div class="md:hidden">
      <div class="flex items-start gap-3 mb-4">
        <div class="text-red-500 font-black text-xl flex-shrink-0">
          R{race.round}
        </div>
        <div class="flex-1 min-w-0">
          <h1 class="text-2xl font-black mb-2 leading-tight">{race.name}</h1>
          <span class={`inline-block px-2 py-1 rounded text-xs font-bold uppercase ${race.status === 'completed' ? 'bg-green-600' : 'bg-red-600'}`}>
            {race.status}
          </span>
        </div>
      </div>
      <div class="space-y-3">
        <div>
          <div class="text-zinc-400 text-xs uppercase mb-1">Circuit</div>
          <div class="font-bold text-base">{circuit.name}</div>
          <div class="text-zinc-400 text-sm">{circuit.location}</div>
        </div>
        <div class="flex gap-6">
          <div>
            <div class="text-zinc-400 text-xs uppercase mb-1">Date</div>
            <div class="font-bold text-sm">{race.date}</div>
          </div>
          <div>
            <div class="text-zinc-400 text-xs uppercase mb-1">Track</div>
            <div class="font-bold text-sm">{circuit.length}km ‚Ä¢ {circuit.turns} turns</div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Desktop Layout -->
    <div class="hidden md:block">
      <div class="flex items-center gap-4 mb-4">
        <div class="w-16 h-16 rounded-full bg-red-600 flex items-center justify-center text-2xl font-black flex-shrink-0">
          {race.round}
        </div>
        <div>
          <h1 class="text-4xl font-black">{race.name}</h1>
          <span class={`inline-block mt-2 px-3 py-1 rounded text-xs font-bold uppercase ${race.status === 'completed' ? 'bg-green-600' : 'bg-red-600'}`}>
            {race.status}
          </span>
        </div>
      </div>
      <div class="grid md:grid-cols-3 gap-6 mt-6">
        <div>
          <div class="text-zinc-400 text-sm">Circuit</div>
          <div class="font-bold text-xl">{circuit.name}</div>
          <div class="text-zinc-400 text-sm">{circuit.location}</div>
        </div>
        <div>
          <div class="text-zinc-400 text-sm">Date</div>
          <div class="font-bold text-xl">{race.date}</div>
        </div>
        <div>
          <div class="text-zinc-400 text-sm">Circuit Info</div>
          <div class="font-bold">{circuit.length}km ‚Ä¢ {circuit.turns} turns</div>
        </div>
      </div>
    </div>
  </div>

  {race.status === 'completed' && resultsWithDrivers.length > 0 && (
    <>
      <h2 class="text-2xl md:text-3xl font-bold mb-4 md:mb-6 border-l-4 border-red-600 pl-4">Race Results</h2>
      <div class="bg-zinc-900 rounded-lg overflow-hidden border border-zinc-800 table-container">
        <table class="w-full min-w-[500px]">
          <thead class="bg-red-600">
            <tr>
              <th class="px-6 py-4 text-left font-bold uppercase text-sm">Pos</th>
              <th class="px-6 py-4 text-left font-bold uppercase text-sm">Driver</th>
              <th class="px-6 py-4 text-left font-bold uppercase text-sm">Team</th>
              <th class="px-6 py-4 text-center font-bold uppercase text-sm">Points</th>
            </tr>
          </thead>
          <tbody>
            {resultsWithDrivers.map((result: any) => {
              const hasFastestLap = fastestLapResult && result.driverId === fastestLapResult.driverId;
              return (
                <tr class={`border-b border-zinc-800 hover:bg-zinc-800 transition-colors ${hasFastestLap ? 'bg-purple-900/30 border-purple-700' : ''}`}>
                  <td class="px-6 py-4">
                    <span class={`font-bold text-2xl ${result.dnf ? 'text-red-500' : result.position === 1 ? 'text-yellow-500' : result.position === 2 ? 'text-gray-400' : result.position === 3 ? 'text-orange-600' : ''}`}>
                      {result.dnf ? 'DNF' : result.position}
                    </span>
                  </td>
                  <td class="px-6 py-4">
                    <a href={`/drivers/${result.driver.id}`} class="font-bold hover:text-red-500 transition-colors">
                      {result.driver.name}
                    </a>
                    <div class="text-sm text-zinc-400">#{result.driver.number}</div>
                  </td>
                  <td class="px-6 py-4">
                    <span class="flex items-center gap-2">
                      <span class="w-3 h-3 rounded" style={`background-color: ${result.team.color}`}></span>
                      <span class="text-sm">{result.team.name}</span>
                    </span>
                  </td>
                  <td class="px-6 py-4 text-center font-bold text-xl">{result.points}</td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </>
  )}

  {race.status === 'upcoming' && (
    <div class="bg-zinc-900 rounded-lg p-12 text-center border-2 border-zinc-800">
      <div class="text-6xl mb-4">üèÅ</div>
      <h2 class="text-2xl font-bold mb-2">Race Coming Soon</h2>
      <p class="text-zinc-400">Results will be available after the race is completed.</p>
    </div>
  )}
</Layout>
