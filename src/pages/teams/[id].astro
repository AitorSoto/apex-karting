---
import Layout from '../../layouts/Layout.astro';
import drivers from '../../../public/data/drivers.json';
import teamsData from '../../../public/data/teams.json';
import results from '../../../public/data/results.json';
import qualifying from '../../../public/data/qualifying.json';

export async function getStaticPaths() {
  return teamsData.map((team: any) => ({
    params: { id: team.id.toString() },
  }));
}

const { id } = Astro.params;
const teams = teamsData;

const team = teams.find((t: any) => t.id === parseInt(id));
if (!team) throw new Error(`Team with id ${id} not found`);

const teamDescription = `${team.name} - Equipo de Apex Karting`;

const teamDrivers = drivers.filter((d: any) => d.teamId === team.id);

// Count points from results where drivers raced for this team
const teamPoints = results
  .filter((r: any) => (r.teamId || drivers.find((d: any) => d.id === r.driverId)?.teamId) === team.id)
  .reduce((sum: number, r: any) => sum + r.points, 0);

const driversWithStats = teamDrivers.map((driver: any) => {
  const driverResults = results.filter((r: any) => r.driverId === driver.id);
  const driverQualifying = qualifying.filter((q: any) => q.driverId === driver.id);
  const points = driverResults.reduce((sum: number, r: any) => sum + r.points, 0);
  const wins = driverResults.filter((r: any) => r.position === 1 && !r.dnf).length;
  const podiums = driverResults.filter((r: any) => r.position <= 3 && !r.dnf).length;
  const poles = driverQualifying.filter((q: any) => q.position === 1 && !q.dnf).length;
  
  return { ...driver, points, wins, podiums, poles };
});

function hexToRgba(hex: string, alpha: number) {
  const r = parseInt(hex.slice(1, 3), 16);
  const g = parseInt(hex.slice(3, 5), 16);
  const b = parseInt(hex.slice(5, 7), 16);
  return `rgba(${r}, ${g}, ${b}, ${alpha})`;
}

function getSilhouetteColor(hex: string) {
  const r = parseInt(hex.slice(1, 3), 16);
  const g = parseInt(hex.slice(3, 5), 16);
  const b = parseInt(hex.slice(5, 7), 16);
  const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
  
  // Return a color with good contrast against the team color
  if (luminance < 0.4) {
    // Dark team color -> use light silhouette
    return 'rgba(255, 255, 255, 0.25)';
  } else {
    // Light/medium team color -> use dark silhouette
    return 'rgba(0, 0, 0, 0.3)';
  }
}

const silhouetteColor = getSilhouetteColor(team.color);
const teamColorRgba20 = hexToRgba(team.color, 0.12);
const teamColorRgba15 = hexToRgba(team.color, 0.08);
const teamColorRgba50 = hexToRgba(team.color, 0.3);
const teamColorRgba40 = hexToRgba(team.color, 0.25);
const teamColorRgba30 = hexToRgba(team.color, 0.18);
const teamColorRgba10 = hexToRgba(team.color, 0.06);
---

<Layout 
  title={`${team.name} - Apex Karting`}
  description={teamDescription}
  image={team.logo || undefined}
>
  <style>
    .driver-card:hover {
      border-color: var(--team-color) !important;
    }
    .driver-card:hover .driver-name {
      color: var(--team-color);
    }
    .team-header::before {
      content: '';
      position: absolute;
      inset: -2px;
      border-radius: 1rem;
      padding: 2px;
      background: linear-gradient(135deg, var(--team-color), transparent 40%, transparent 60%, var(--team-color));
      -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
      -webkit-mask-composite: xor;
      mask-composite: exclude;
      opacity: 0.8;
      pointer-events: none;
    }
  </style>
  <button onclick="history.back()" class="inline-block mb-6 text-red-500 hover:text-red-400 transition-colors cursor-pointer">
    ← Volver atrás
  </button>

  <div class="team-header relative rounded-2xl p-6 md:p-10 mb-8 shadow-2xl overflow-visible" style={`--team-color: ${team.color}; background: linear-gradient(135deg, ${teamColorRgba20} 0%, #18181b 30%, #18181b 70%, ${teamColorRgba15} 100%)`}>
    <div class="absolute top-0 left-0 w-full h-full rounded-2xl opacity-40 pointer-events-none" style={`background: radial-gradient(circle at 20% 50%, ${teamColorRgba50} 0%, transparent 50%), radial-gradient(circle at 80% 80%, ${teamColorRgba40} 0%, transparent 50%)`}></div>
    <div class="relative flex flex-col md:flex-row items-center md:items-start gap-6 md:gap-8">
      <div class="relative group">
        <div class="absolute inset-0 rounded-full blur-xl opacity-40 group-hover:opacity-60 transition-opacity" style={`background-color: ${team.color}`}></div>
        <div class="relative w-28 h-28 md:w-36 md:h-36 rounded-full flex items-center justify-center overflow-hidden flex-shrink-0 aspect-square shadow-lg" style={`background: linear-gradient(135deg, ${teamColorRgba30}, ${teamColorRgba10}); border: 4px solid ${team.color}`} transition:name={`team-logo-${team.id}`}>
          {team.logo ? (
            <img src={team.logo} alt={`${team.name} logo`} class="w-full h-full object-cover" />
          ) : (
            <span class="text-4xl md:text-6xl font-black" style={`color: ${team.color}`}>
              {team.name.charAt(0)}
            </span>
          )}
        </div>
      </div>
      <div class="flex-1 text-center md:text-left">
        <h1 class="text-4xl md:text-6xl font-black mb-4 tracking-tight" style={`color: ${team.color}; text-shadow: 0 0 30px ${teamColorRgba40}`} transition:name={`team-name-${team.id}`}>{team.name}</h1>
        <div class="inline-flex items-center gap-3 bg-zinc-950/50 backdrop-blur-sm rounded-full px-6 py-3 border border-zinc-700">
          <span class="text-3xl md:text-4xl font-black bg-gradient-to-r from-red-500 to-red-400 bg-clip-text text-transparent">{teamPoints}</span>
          <span class="text-lg md:text-xl text-zinc-400 font-semibold">Puntos</span>
        </div>
      </div>
    </div>
  </div>

  <h2 class="text-3xl font-bold mb-6 border-l-4 border-red-600 pl-4">Pilotos del Equipo</h2>
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
    {driversWithStats.map((driver: any) => (
      <a href={`/drivers/${driver.id}`} class="driver-card bg-zinc-900 rounded-lg overflow-hidden border-2 border-zinc-800 transition-all group" style={`--team-color: ${team.color}`}>
        <div class="h-64 flex items-center justify-center overflow-hidden" style={`background: linear-gradient(135deg, ${team.color}15 0%, ${team.color}30 100%)`}>
          {driver.image ? (
            <img src={driver.image} alt={driver.name} class="w-full h-full object-cover" style={`object-position: ${driver.imagePosition || 'top'}`} />
          ) : (
            <div class="w-full h-full flex items-center justify-center">
              <svg class="w-32 h-32" viewBox="0 0 24 24" fill="currentColor" style={`color: ${silhouetteColor}`}>
                <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
              </svg>
            </div>
          )}
        </div>
        <div class="p-6">
          <div class="flex items-center justify-between mb-4">
            <h3 class="driver-name text-2xl font-bold transition-colors" style={`color: ${team.color}`}>{driver.name}</h3>
            <span class="text-4xl font-black text-zinc-700">#{driver.number}</span>
          </div>
          <div class="grid grid-cols-4 gap-4 text-center">
            <div>
              <div class="text-zinc-400 text-sm">Puntos</div>
              <div class="font-bold text-xl">{driver.points}</div>
            </div>
            <div>
              <div class="text-zinc-400 text-sm">Victorias</div>
              <div class="font-bold text-xl">{driver.wins}</div>
            </div>
            <div>
              <div class="text-zinc-400 text-sm">Podios</div>
              <div class="font-bold text-xl">{driver.podiums}</div>
            </div>
            <div>
              <div class="text-zinc-400 text-sm">Poles</div>
              <div class="font-bold text-xl">{driver.poles}</div>
            </div>
          </div>
        </div>
      </a>
    ))}
  </div>
</Layout>
